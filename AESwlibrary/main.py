""" from Crypto.Cipher import AES

def pad(entry):
    pdded = entry+(16-len(entry)%16) * '['
    return pdded

text = input('Digite texto para codificar: ')
text = pad(text)
text = text.encode('UTF-8')

key = '123'
key = pad(key)
key = key.encode('UTF-8')

cipher = AES.new(key, AES.MODE_ECB)
cipherText = cipher.encrypt(text)
print(cipherText)  """

S_BOX = [
    [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
    [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
    [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
    [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
    [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
    [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
    [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
    [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
    [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
    [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
    [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
    [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
    [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
    [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
    [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
    [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
]

# Tabela de substituição para a operação inversa de substituição de bytes
INV_S_BOX = [
    [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb],
    [0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0x1c, 0x54, 0xb7, 0x0b],
    [0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69],
    [0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf],
    [0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16, 0x34, 0x7e, 0x74, 0x1f, 0x4b],
    [0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86],
    [0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce],
    [0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0],
    [0x54, 0xbb, 0x16, 0x34, 0x7e, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48],
    [0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69],
    [0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf],
    [0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16, 0x34, 0x7e, 0x74, 0x1f, 0x4b],
    [0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86],
    [0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce],
    [0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0],
    [0x54, 0xbb, 0x16, 0x34, 0x7e, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48]
]

# Tabela de permutação para a operação de shiftRows
SHIFT_ROWS_TABLE = [
    [0, 1, 2, 3],
    [1, 2, 3, 0],
    [2, 3, 0, 1],
    [3, 0, 1, 2]
]

# Matriz de mistura para a operação de mixColumns
MIX_COLUMNS_MATRIX = [
    [0x02, 0x03, 0x01, 0x01],
    [0x01, 0x02, 0x03, 0x01],
    [0x01, 0x01, 0x02, 0x03],
    [0x03, 0x01, 0x01, 0x02]
]

# Tabela de permutação para a operação de invShiftRows
INV_SHIFT_ROWS_TABLE = [
    [0, 1, 2, 3],
    [3, 0, 1, 2],
    [2, 3, 0, 1],
    [1, 2, 3, 0]
]

# Tabela de permutação para a operação de invMixColumns
INV_MIX_COLUMNS_MATRIX = [
    [0x0e, 0x0b, 0x0d, 0x09],
    [0x09, 0x0e, 0x0b, 0x0d],
    [0x0d, 0x09, 0x0e, 0x0b],
    [0x0b, 0x0d, 0x09, 0x0e]
]

# RCON para a expansão de chave
RCON = [
    [0x01, 0x00, 0x00, 0x00],
    [0x02, 0x00, 0x00, 0x00],
    [0x04, 0x00, 0x00, 0x00],
    [0x08, 0x00, 0x00, 0x00],
    [0x10, 0x00, 0x00, 0x00],
    [0x20, 0x00, 0x00, 0x00],
    [0x40, 0x00, 0x00, 0x00],
    [0x80, 0x00, 0x00, 0x00],
    [0x1B, 0x00, 0x00, 0x00],
    [0x36, 0x00, 0x00, 0x00]
]

# Função para substituição de bytes
def substituir_bytes(estado):
    for i in range(4):
        for j in range(4):
            estado[i][j] = S_BOX[i][j]
    return estado

# Função para shiftRows
def shift_rows(estado):
    for i in range(4):
        estado[i] = estado[i][SHIFT_ROWS_TABLE[i][0]:] + estado[i][:SHIFT_ROWS_TABLE[i][0]]
    return estado

# Função para mixColumns
def mix_columns(estado):
    novo_estado = [[0 for _ in range(4)] for _ in range(4)]
    for i in range(4):
        for j in range(4):
            for k in range(4):
                novo_estado[i][j] ^= galois_multiplication(MIX_COLUMNS_MATRIX[i][k], estado[k][j])
    return novo_estado

# Função para multiplicação de Galois
def galois_multiplication(a, b):
    p = 0
    for _ in range(8):
        if b & 1:
            p ^= a
        hi_bit_set = a & 0x80
        a <<= 1
        if hi_bit_set:
            a ^= 0x1B
        b >>= 1
    return p

# Função para expansão da chave
def expandir_chave(chave):
    chaves_de_rodada = [chave]
    for i in range(10):
        ultima_chave = chaves_de_rodada[-1]
        nova_chave = ultima_chave[:]
        nova_chave = rotacionar_palavra(nova_chave)
        nova_chave = aplicar_substituicao(nova_chave)
        nova_chave[0] ^= RCON[i][0]
        nova_chave = adicionar_chaves(nova_chave, chaves_de_rodada[-1])
        chaves_de_rodada.append(nova_chave)
    return chaves_de_rodada

# Função para rotacionar uma palavra de 4 bytes
def rotacionar_palavra(word):
    return word[1:] + word[:1]

# Função para aplicar a S-box em cada byte da palavra
def aplicar_substituicao(word):
    return [substituir_byte(byte) for byte in word]

# Função para adicionar chaves
def adicionar_chaves(chave1, chave2):
    return [(byte1,  byte2) for byte1, byte2 in zip(chave1, chave2)]

# Função para substituir um byte através da S-box
def substituir_byte(byte):
    return S_BOX[byte // 16][byte % 16]

# Função principal AES
def AES(texto, chave):
    chaves_de_rodada = expandir_chave(chave)
    texto_cifrado = ""
    for bloco in dividir_em_blocos(texto):
        estado = bloco
        estado = adicionar_chave_inicial(estado, chaves_de_rodada[0])
        for i in range(1, 10):
            estado = substituir_bytes(estado)
            estado = shift_rows(estado)
            estado = mix_columns(estado)
            estado = adicionar_chaves(estado, chaves_de_rodada[i])
        estado = substituir_bytes(estado)
        estado = shift_rows(estado)
        estado = adicionar_chaves(estado, chaves_de_rodada[10])
        texto_cifrado += combinar_blocos_cifrados(estado)  # Corrigido aqui
    return texto_cifrado

def combinar_blocos_cifrados(blocos):
    texto_cifrado = ""
    for bloco in blocos:
        for byte in bloco:
            texto_cifrado += chr(byte)
    return texto_cifrado

# Função para dividir o texto em blocos de 128 bits
def dividir_em_blocos(texto):
    if isinstance(texto, str):
        texto = texto.encode('utf-8')
    blocos = []
    for i in range(0, len(texto), 16):
        bloco = texto [i:i + 16]
        blocos.append(bloco)
    return blocos

# Função para adicionar a chave inicial
def adicionar_chave_inicial(estado, chave):
    novo_estado = [[0 for _ in range(4)] for _ in range(4)]
    for i in range(4):
        for j in range(4):
            if( isinstance(estado, list) and isinstance(chave, list)):
                novo_estado[i][j] = estado[i][j] ^ chave[i][j]
            else:
                novo_estado[i][j] =  chave[i * 4 + j]
    return novo_estado

# Função para combinar todos os blocos cifrados em um texto cifrado
def combinar_blocos_cifrados(blocos):
    texto_cifrado = ""
    for bloco in blocos:
        for byte in bloco:
            texto_cifrado += chr(byte)
    return texto_cifrado

# Teste
texto = "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
chave = bytes([0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab,0xf7, 0x97, 0x8e, 0x25, 0x9f, 0xae, 0x49])
texto_cifrado = AES(texto.encode('utf-8'), chave)
print("Texto cifrado:", texto_cifrado)